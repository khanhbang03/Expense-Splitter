// D·ªØ li·ªáu ng∆∞·ªùi d√πng c·ªë ƒë·ªãnh (c·∫ßn tr√πng kh·ªõp v·ªõi HTML)
const USERS = [
    { id: 'U1', name: 'Dinh Phuong Anh' },
    { id: 'U2', name: 'Anh Viet Doan' },
    { id: 'U3', name: 'Le Duy Duc' },
    { id: 'U4', name: 'Chu Thanh Thao' },
    { id: 'U5', name: 'Ta Ha Trang' },
    { id: 'U6', name: 'Nguyen Khanh Bang' },
    { id: 'U7', name: 'Nguyen Phuc Thang' },
    { id: 'U8', name: 'Le Van Bao' },
    { id: 'U9', name: 'Mrudav Mehta' }
];

// M√¥ ph·ªèng n∆°i l∆∞u tr·ªØ Giao D·ªãch (Trong th·ª±c t·∫ø l√† Database Backend)
let EXPENSE_HISTORY = [];

// L·∫•y c√°c ph·∫ßn t·ª≠ DOM
const expenseForm = document.getElementById('expense-form');
const selectAllBtn = document.getElementById('select-all');
const participantsList = document.getElementById('split-participants');
const updateSummaryBtn = document.getElementById('update-summary-btn');
const debtResultsDiv = document.getElementById('debt-results');

/*
=================================
1. CH·ª®C NƒÇNG H·ªñ TR·ª¢ GIAO DI·ªÜN
=================================
*/

/**
 * H√†m h·ªó tr·ª£ ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá (VND)
 */
function formatVND(amount) {
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
}

/**
 * X·ª≠ l√Ω n√∫t "Ch·ªçn T·∫•t C·∫£"
 */
selectAllBtn.addEventListener('click', () => {
    const checkboxes = participantsList.querySelectorAll('input[type="checkbox"]');
    const isAllChecked = Array.from(checkboxes).every(cb => cb.checked);
    checkboxes.forEach(cb => {
        // N·∫øu ƒë√£ ch·ªçn h·∫øt, th√¨ b·ªè ch·ªçn, ng∆∞·ª£c l·∫°i ch·ªçn h·∫øt
        cb.checked = !isAllChecked; 
    });
});


/*
=================================
2. X·ª¨ L√ù FORM GHI L·∫†I CHI PH√ç
=================================
*/

expenseForm.addEventListener('submit', (event) => {
    event.preventDefault();

    const description = document.getElementById('description').value;
    const totalAmount = parseFloat(document.getElementById('total-amount').value);
    const paidBy = document.getElementById('paid-by').value;
    
    // L·∫•y danh s√°ch ng∆∞·ªùi tham gia
    const selectedParticipants = Array.from(participantsList.querySelectorAll('input[name="participants"]:checked'))
                                    .map(cb => cb.value);

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán
    if (!description || isNaN(totalAmount) || totalAmount <= 0) {
        alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m√¥ t·∫£ v√† s·ªë ti·ªÅn h·ª£p l·ªá.');
        return;
    }
    if (!paidBy) {
        alert('Vui l√≤ng ch·ªçn ng∆∞·ªùi ƒë√£ tr·∫£ ti·ªÅn.');
        return;
    }
    if (selectedParticipants.length === 0) {
        alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ng∆∞·ªùi tham gia.');
        return;
    }

    // --- LOGIC X·ª¨ L√ù (M√¥ ph·ªèng Backend) ---
    const shareAmount = totalAmount / selectedParticipants.length;

    const newExpense = {
        id: Date.now(), // ID giao d·ªãch
        description,
        totalAmount,
        paidBy,
        shareAmount,
        participants: selectedParticipants,
        date: new Date().toISOString()
    };
    
    EXPENSE_HISTORY.push(newExpense);
    
    // Th√¥ng b√°o th√†nh c√¥ng v√† reset form
    alert(`ƒê√£ ghi l·∫°i chi ph√≠ "${description}" tr·ªã gi√° ${formatVND(totalAmount)}.\nChi ph√≠ ƒë∆∞·ª£c chia ƒë·ªÅu cho ${selectedParticipants.length} ng∆∞·ªùi, m·ªói ng∆∞·ªùi ch·ªãu ${formatVND(shareAmount)}.`);
    
    expenseForm.reset();
    updateSummaryBtn.click(); // C·∫≠p nh·∫≠t t·ªïng quan n·ª£ ngay l·∫≠p t·ª©c
});

/*
=================================
3. LOGIC T√çNH TO√ÅN N·ª¢ R√íNG (NET DEBT)
=================================
*/

/**
 * T√≠nh to√°n n·ª£ r√≤ng cho t·∫•t c·∫£ ng∆∞·ªùi d√πng d·ª±a tr√™n l·ªãch s·ª≠ EXPENSE_HISTORY
 */
function calculateNetDebt() {
    // Kh·ªüi t·∫°o s·ªï d∆∞ r√≤ng cho t·∫•t c·∫£ ng∆∞·ªùi d√πng
    const netBalances = {};
    USERS.forEach(user => netBalances[user.id] = 0);

    // 1. Ph√¢n t√≠ch t·ª´ng giao d·ªãch trong l·ªãch s·ª≠
    EXPENSE_HISTORY.forEach(expense => {
        const { paidBy, shareAmount, participants, totalAmount } = expense;

        // X·ª≠ l√Ω ti·ªÅn tr·∫£: Ng∆∞·ªùi tr·∫£ ƒë∆∞·ª£c C·ªòNG v√†o t·ªïng n·ª£
        netBalances[paidBy] += totalAmount;

        // X·ª≠ l√Ω ti·ªÅn ch·ªãu: Ng∆∞·ªùi tham gia b·ªã TR·ª™ ƒëi ph·∫ßn chi ph√≠ c·ªßa h·ªç
        participants.forEach(userId => {
            netBalances[userId] -= shareAmount;
        });

        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ng∆∞·ªùi tr·∫£ c≈©ng l√† ng∆∞·ªùi tham gia (ph·∫ßn c·ªßa h·ªç b·ªã tr·ª´)
        // L∆∞u √Ω: Logic tr√™n ƒë√£ x·ª≠ l√Ω ƒë√∫ng: netBalances[paidBy] ƒë∆∞·ª£c c·ªông totalAmount,
        // sau ƒë√≥ b·ªã tr·ª´ shareAmount, v√¨ v·∫≠y s·ªë d∆∞ r√≤ng c·ªßa h·ªç l√† (totalAmount - shareAmount).
    });

    // 2. Chuy·ªÉn ƒë·ªïi ID th√†nh t√™n v√† l·ªçc ra c√°c kho·∫£n n·ª£ th·ª±c t·∫ø
    const summary = [];
    for (const userId in netBalances) {
        const balance = netBalances[userId];
        if (Math.abs(balance) > 1) { // L·ªçc c√°c s·ªë d∆∞ g·∫ßn b·∫±ng 0
            const user = USERS.find(u => u.id === userId).name;
            const status = balance > 0 ? 'OWED' : 'OWES';
            summary.push({ user, balance: balance, status });
        }
    }

    return summary;
}

/**
 * Hi·ªÉn th·ªã k·∫øt qu·∫£ n·ª£ r√≤ng l√™n giao di·ªán
 */
function displayDebtSummary() {
    debtResultsDiv.innerHTML = '';
    const netDebts = calculateNetDebt();

    if (netDebts.length === 0) {
        debtResultsDiv.innerHTML = '<p>üéâ T·∫•t c·∫£ m·ªçi ng∆∞·ªùi ƒë·ªÅu ƒë√£ hu·ªÅ v·ªën! Kh√¥ng c√≥ kho·∫£n n·ª£ n√†o.</p>';
        return;
    }

    netDebts.sort((a, b) => b.balance - a.balance); // S·∫Øp x·∫øp ƒë·ªÉ xem ng∆∞·ªùi ƒë∆∞·ª£c n·ª£ nhi·ªÅu nh·∫•t tr∆∞·ªõc

    netDebts.forEach(item => {
        const div = document.createElement('div');
        const absBalance = Math.abs(item.balance);
        
        if (item.status === 'OWED') {
            div.className = 'debt-item owed';
            div.textContent = `${item.user} ƒë∆∞·ª£c n·ª£: ${formatVND(absBalance)}`;
        } else {
            div.className = 'debt-item owes';
            div.textContent = `${item.user} ƒëang n·ª£: ${formatVND(absBalance)}`;
        }
        debtResultsDiv.appendChild(div);
    });
    
    // *L∆∞u √Ω: ƒê·ªÉ hi·ªÉn th·ªã "Ai n·ª£ ai" c·ª• th·ªÉ, b·∫°n c·∫ßn d√πng thu·∫≠t to√°n t·ªëi ∆∞u h√≥a n·ª£ (Simplified Debt), ph·ª©c t·∫°p h∆°n.*
    const info = document.createElement('p');
    info.style.marginTop = '15px';
    info.style.fontStyle = 'italic';
    info.textContent = `(B√°o c√°o n√†y hi·ªÉn th·ªã t·ªïng s·ªë ti·ªÅn N·ª£ R√≤ng c·ªßa m·ªói ng∆∞·ªùi.`;
    debtResultsDiv.appendChild(info);
}

// G√°n s·ª± ki·ªán cho n√∫t c·∫≠p nh·∫≠t
updateSummaryBtn.addEventListener('click', displayDebtSummary);


/*
=================================
4. KH·ªûI T·∫†O (INITIALIZATION)
=================================
*/

// Ch·∫°y h√†m c·∫≠p nh·∫≠t t·ªïng n·ª£ l·∫ßn ƒë·∫ßu ti√™n
document.addEventListener('DOMContentLoaded', () => {
    // M·∫∑c d√π HTML ƒë√£ c√≥ options, n·∫øu b·∫°n mu·ªën linh ho·∫°t h∆°n c√≥ th·ªÉ d√πng JS ƒë·ªÉ populate select boxes.
    displayDebtSummary();
});

// Th√™m giao d·ªãch m√¥ ph·ªèng khi kh·ªüi ƒë·ªông ƒë·ªÉ d·ªÖ ki·ªÉm th·ª≠
EXPENSE_HISTORY.push({
    id: 1, description: 'Ti·ªÅn ƒÇn T·ªëi', totalAmount: 1000000, paidBy: 'U3', shareAmount: 200000, participants: ['U1', 'U2', 'U3', 'U4', 'U5'], date: new Date().toISOString()
});
EXPENSE_HISTORY.push({
    id: 2, description: 'V√© xem phim', totalAmount: 500000, paidBy: 'U1', shareAmount: 250000, participants: ['U1', 'U5'], date: new Date().toISOString()
});